** What happens when you initialize a repository? Why do you need to do it?

For one thing, the .git directory gets created.  It's said to contain some
sort of metadata, and perhaps that requires some sort of initialization
(that's what a quick look at .git suggests).  


** How is the staging area different from the working directory and
the repository?  What value do you think it offers?

It's not clear yet *how* it's different, only that it's a distinct 
thing logically between the working directory and the repository.

The video says that it's useful so you can control exactly what
files are stored in the repository.  To me it doesn't seem so obvious
why that would be a good idea if the repository is going to take a
"snapshot" of all files anyway -- unless maybe it allows you to have
files in the working directory that aren't in the repository at all?
which does seem potentially useful.


** How can you use the staging area to make sure you have one commit
per logical change?

You can compare the staging area to the most recent commit with
"git diff --staged"?

Better answer after viewing others' reflections:  This allows you to
control what changes are included in the "snapshot" -- for example,
if you're working on different sets of changes, this would allow you
to include only some of them in a commit.


** What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

A branch would be helpful if you want to maintain different versions,
such as one that supposedly works and one with a new feature that might
not (okay, this is an example from the video).  One of the interviews
with an experienced user raved about this use case, so it must be
useful for at least some users!


** How do the diagrams help you visualize the branch structure?

Um, "duh"?  I may be a plain-text fanatic but even I recognize that
for most humans pictures work well.  Here, the picture makes the
logical structure clearer -- each commit has a parent or parents,
so they form a directed graph, and a diagram is a good way to show
that.


** What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

The result merges changes made on the two branches, comparing them
to their common ancestor (as best I can tell).  To me the way it's
represented in the diagram is the only obvious way to do so!

Better answer:  The result of merging two branches is a commit with
two (or more??) parents, which is consistent with the diagram.


** What are the pros and cons of Git's automatic merging vs. always
doing merges manually?

Pros of automatic merging:  It's easier, and when it works it should
be less error-prone that doing manual merges.

Cons of automatic merging:  If conflicts (as described in the video)
arise, something has to resolve them.  To me it seems obvious that
it's better to have this done by humans -- if AI ever gets smart
enough to resolve conflicts in code, hm, might it be smart enough
to write code?  whether this is possible might be an interesting and
possibly deep question?  Also I'm not convinced that automatic merging
will always work well even when it appears to -- if the code is nice
and modular, maybe so, but to me it seems like there could be cases
where two changes don't trigger Git's conflict detection but actually
do interact.

