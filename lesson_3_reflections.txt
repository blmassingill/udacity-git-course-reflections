** When would you want to use a remote repository rather than keeping
all your work local?

It puts a copy of the repository "in the cloud", no?  which could be
useful for several reasons -- as a way to share the work between
different computers, as a way to share among different users, or as
a backup.  Also it might be a good way to "publish" code, if the 
remote repository is hosted in a place others can easily access.


** Why might you want to always pull changes manually rather than
having Git automatically stay up-to-date with your remote repository?

More control?  If you're the only person working on the remote
repository, having Git automatically pull any changes made to the
remote repository might make sense.  But if you were using it to
collaborate, it might be quite annoying and disruptive to have someone
else's commit overwrite what you're working on.


** Describe the differences between forks, clones, and branches.
When would you use one instead of another?

As I understand it, a clone is a copy of a repository; a fork is 
a GitHub-specific type of clone in which both the original and the
copy are GitHub repositories.  Branches represent sequences of
commits within a single repository.


** What is the benefit of having a copy of the last known state of
the remote stored locally?

Good question, since the last known state of the remote might not be
its current state.  I guess maybe it's useful to at least know what's
different between the local repository and the last known state of 
the remote?  


** How would you collaborate without using Git or GitHub?  What would
be easier, and what would be harder?

There are lots of ways, and I've tried more than one of them.  On one
project, we used an SVN repository, which seems to be somewhat like
using Git with GitHub; on another project, I acted as the keeper of
the master copy of the project, and the others sent changed versions of
files to me, and I reviewed them and merged them into the master copy.
I suppose working on a shared Google Doc also counts as collaboration?

Collaborating without any tools support (the second option above)
is easier in that you don't have to learn the tool, but more trouble
because you don't have the tool to keep versions organized and provide
easy access to everyone to the current state of the project.


** When would you want to make changes in a separate branch rather
than directly in master?  What benefits does each approach have?

Making changes in a separate branch:  This seems like a better idea
if several people are working on the same group of files, especially
if their changes might conflict.  Trying to have them all work on
the same branch (master) -- it seems like they'd potentially be
stepping on each other.

Making changes directly in the master branch does seem simpler, though,
if/when it works?

